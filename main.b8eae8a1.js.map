{"version":3,"sources":["scripts/main.js"],"names":["listItems","document","querySelectorAll","list","querySelector","getNumber","salary","Number","replace","sortList","argList","Array","from","sort","person1","person2","dataset","li","append","getEmployees","arrOfSortPersons","map","item","person","name","innerHTML","trim","position","age"],"mappings":";AAAA,aAoCA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,IAAA,CAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAlCA,IAAIA,EAAYC,SAASC,iBAAiB,MACpCC,EAAOF,SAASG,cAAc,MAE9BC,EAAY,SAACC,GACVC,OAAAA,OAAOD,EAAOE,QAAQ,IAAK,IAAIA,QAAQ,IAAK,MAGrD,SAASC,EAASC,GACTC,OAAAA,MAAMC,KAAKF,GAASG,KAAK,SAACC,EAASC,GAAYV,OAAAA,EACpDU,EAAQC,QAAQV,QAAUD,EAAUS,EAAQE,QAAQV,UAKvCN,IAoBjB,EApBiBA,EAAAA,EAFjBA,EAAYS,EAAST,IAsBrB,IApB4B,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAjBiB,IAAAA,EAAiB,EAAA,MAC1Bd,EAAKe,OAAOD,IAmBd,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAhBA,SAASE,EAAaT,GAabU,OAZkBV,EAAQW,IAAI,SAACC,GAS7BC,MARQ,CAEbC,KAAMF,EAAKG,UAAUC,OACrBC,SAAUL,EAAKN,QAAQW,SACvBrB,OAAQgB,EAAKN,QAAQV,OACrBsB,IAAKN,EAAKN,QAAQY,OASxBT,EAAanB","file":"main.b8eae8a1.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nlet listItems = document.querySelectorAll('li');\nconst list = document.querySelector('ul');\n\nconst getNumber = (salary) => {\n  return Number(salary.replace(',', '').replace('$', ''));\n};\n\nfunction sortList(argList) {\n  return Array.from(argList).sort((person1, person2) => getNumber(\n    person2.dataset.salary) - getNumber(person1.dataset.salary));\n}\n\nlistItems = sortList(listItems);\n\nfor (const li of listItems) {\n  list.append(li);\n}\n\nfunction getEmployees(argList) {\n  const arrOfSortPersons = argList.map((item) => {\n    const person = {\n\n      name: item.innerHTML.trim(),\n      position: item.dataset.position,\n      salary: item.dataset.salary,\n      age: item.dataset.age,\n    };\n\n    return person;\n  });\n\n  return arrOfSortPersons;\n}\n\ngetEmployees(listItems);\n"]}